<html>
    <head>
        <script src="http://code.jquery.com/jquery-1.10.2.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <meta charset="UTF-8">
        <title>Tetris</title>
    </head>
    <body>
        <br>
        <div id="blank" style="width:15%; float:left; color:white;"></div>
        <div class ="divStyle" id="tetris1" name="tetris1">
            <canvas class="canvasStyle" id="canvas1" width=300px height=600px></canvas>
            <br>
            <canvas class="floor" id="floor1" name="floor1" width=300 height=40></canvas>
            <br>
            <button class ="btn-block" id="btn_back" onclick="location.href='/'"><span style="font-size:130%;">Go</span><span style="font-size:120%; font-weight:700;">메인으로</span></button>
            <button class ="btn-block" id="btn_dualPlay"><span style="font-size:130%;">Go</span><span style="font-size:120%; font-weight:700;">2인 플레이(DEMO)</span></button>
        </div>
        <div class ="divStyle" style="width:25%; float:left" id="tetris2" name="tetris2" style="width:49%; float:left;">

        </div>
    </body>
    <style>
        .divStyle{
            margin: auto;
            text-align:center;
        }

        .btn-block{
            position: relative;
            text-align: center;
            box-shadow: none;
            border: none;
            width: 8%;
            height: 5%;
            line-height: 35px;
            background-color: white;
            border-color:black;
            color:white;
        }
        .btn-block span{
            border-radius: 5px;
            display: block;
            box-shadow:none;
            position: absolute;
            width: 100%;
            height: 100%;
            background-color: rgb(109, 20, 20);
            border: 2px solid rgb(109, 20, 20);
            margin: 0;
            text-align: center;
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
            -webkit-transition: all .3s;
            transition: all .3s;
        }
        .btn-block span:nth-child(1){
            -webkit-transform: rotateX(90deg);
            -moz-transform: rotateX(90deg);
            transform: rotateX(90deg);
            -webkit-transform-origin: 50% 50% -20px;
            -moz-transform-origin: 50% 50% -20px;
            transform-origin: 50% 50% -20px;
        }
        .btn-block span:nth-child(2){
            -webkit-transform: rotateX(0deg);
            -moz-transform: rotateX(0deg);
            transform: rotateX(0deg);
            -webkit-transform-origin: 50% 50% -20px;
            -moz-transform-origin: 50% 50% -20px;
            transform-origin: 50% 50% -20px;
        }
        .btn-block:hover span:nth-child(1) {
            -webkit-transform: rotateX(0deg);
            -moz-transform: rotateX(0deg);
            transform: rotateX(0deg);
        }
        .btn-block:hover span:nth-child(2) {
            -webkit-transform: rotateX(-90deg);
            -moz-transform: rotateX(-90deg);
            transform: rotateX(-90deg);
        }

        .floor{
            background: rgb(109, 20, 20);
        }

        .canvasStyle{
            background: rgb(230, 255, 232);
        }
    </style>
    <script>
        var canvas1 = document.getElementById("canvas1");
        var context1 = canvas1.getContext("2d");
        
        var block = [[0,0],[0,1],[0,2],[0,3],  // block1
                      [0,0],[0,1],[0,2],[1,2],  // block2
                      [0,0],[0,1],[0,2],[-1,2], // block3
                      [0,0],[-1,1],[0,1],[1,1], // block4
                      [0,0],[1,0],[1,1],[2,1],  // block5
                      [0,0],[1,0],[-1,1],[0,1], // block6
                      [0,0],[1,0],[0,1],[1,1]   // block7
                    ];
        var screen = new Array(200);
        var screen2 = new Array(200);
        for(var i=0; i < 200; i++){ screen[i] = 0; }
        var stateCode;
        var posX, posY;
        var Leftval, Rightval;
        var Currentblock;
        var score = 0;
        var dualPlay = false;
        const h = 30;
        var conn_block_x = [];
        var conn_block_y = [];
        var block2_x, block2_y;
        context1.strokeStyle ="white";

        window.onkeydown = function(){
            if(event.keyCode===37){ stateCode = 1; }    // left
            if(event.keyCode===38){ stateCode = 2; }    // up - rotation
            if(event.keyCode===39){ stateCode = 3; }    // right
            if(event.keyCode===40){ stateCode = 4; }    // down
            //if(){ stateCode = 5; } // space
        }

        // $(function(){
        //     var socket = io('/Tetris');

        //     var code = makeRandcode();
        //     socket.emit('login',{
        //         userCode: code
        //     });

        //     // 다른 유저가 듀얼 플레이어로 로그인 한 경우
        //     socket.on('dual_player_login',function(){
        //         dualPlay = true;
        //         dual_play_screen();
        //     });

        //     // 다른 유저가 듀얼 플레이에서 disconnected 된 경우
        //     socket.on('s2c disconnect',function(){
        //         console.log("out");
        //         $("#tetris2").empty();
        //         $("#tetris1").css('width',"55%");
        //         $("#btn_back").css('width',"13%");
        //         $("#btn_dualPlay").css('width',"13%");
        //         dualPlay = false;
        //     });

        //     // 다른 플레이어의 data 수신
        //     socket.on('dual_player_data',function(data){
        //         //console.log(data);
        //         screen2 = data.other_user_screen;
        //         block2_x = data.other_user_block_x;
        //         block2_y = data.other_user_block_y;
        //         printBlock_others();
        //         printScreen_others();
        //     });

        //     $("#btn_dualPlay").click(function(){
        //         dual_play_screen();
        //         dualPlay = true;
        //         socket.emit('dual_player_login',{});  
        //     });

        //     setInterval(function(){
        //     //console.log("..");
        //     if(dualPlay===true){
        //         socket.emit('dual_player_data',{
        //             screen: screen,
        //             block_x: conn_block_x,
        //             block_y: conn_block_y
        //         });
        //     }
        //     },500);

        //     for(i=0;i<200;i++){
        //         screen[i] = 0;
        //     }
        //     init();
        //     moveBlock();
        // })

        // function dual_play_screen(){
        //     $("#tetris1").css('width',"25%");
        //     $("#tetris1").css('float',"left");
        //     $("#blank").text(".");
        //     $("#btn_back").css('width',"32%");
        //     $("#btn_dualPlay").css('width',"32%");
        //     $("#tetris2").append("<canvas class='canvasStyle' id='canvas2' width=300px height=600px></canvas><br><canvas style='background-color:rgb(7, 55, 70);' width=300 height=40></canvas>");
        // }

        function init(){
            posX = 4;
            posY = 0;
            stateCode = 0;
            Currentblock = 4*Math.floor(Math.random()*7);
        }

        function printBlock(){
            conn_block_x = [];
            conn_block_y = [];
            for(i=0;i<4;i++){
                conn_block_x.push(posX+block[Currentblock+i][0]);
                conn_block_y.push(posY+block[Currentblock+i][1]);

                context1.beginPath();
                context1.fillRect(h*(posX+block[Currentblock+i][0]),h*(posY+block[Currentblock+i][1]),h,h);
                context1.strokeRect(h*(posX+block[Currentblock+i][0])+3,h*(posY+block[Currentblock+i][1])+3,h-3,h-3);
                context1.closePath();
            }
        }
        function printBlock_others(){   // 순서 먼저
            var canvas2 = document.getElementById("canvas2");
            var context2 = canvas2.getContext("2d");
            context2.strokeStyle ="white";
            context2.clearRect(0,0,300,600);
            for(i=0;i<4;i++){
                context2.beginPath();
                context2.fillRect(h*block2_x[i],h*block2_y[i],h,h);
                context2.strokeRect(h*block2_x[i]+3,h*block2_y[i]+3,h-3,h-3);
                context2.closePath();
            }
        }

        function printScreen(){
            for(j=0;j<20;j++){
                for(i=0;i<10;i++){
                    let t = 10*j + i;
                    if(screen[t]===1){
                        context1.beginPath();
                        context1.fillRect(h*i,h*j,h,h);
                        context1.strokeRect(h*i+3,h*j+3,h-3,h-3);
                        context1.closePath();
                    }
                }
            }
        }
        function printScreen_others(){
            var canvas2 = document.getElementById("canvas2");
            var context2 = canvas2.getContext("2d");
            context2.strokeStyle ="white";
            for(j=0;j<20;j++){
                for(i=0;i<10;i++){
                    let t = 10*j + i;
                    //console.log(screen2[t]);
                    if(screen2[t]===1){
                        context2.beginPath();
                        context2.fillRect(h*i,h*j,h,h);
                        context2.strokeRect(h*i+3,h*j+3,h-3,h-3);
                        context2.closePath();
                    }
                }
            }
        }

        function rotate(Tempblock){
            let temp_x, temp_y;
            if(Currentblock!==24){
                for(i=1;i<4;i++){
                    temp_x = Tempblock[Currentblock+i][0]*Math.cos(Math.PI/2) - Tempblock[Currentblock+i][1]*Math.sin(Math.PI/2);
                    temp_y = Tempblock[Currentblock+i][0]*Math.sin(Math.PI/2) + Tempblock[Currentblock+i][1]*Math.cos(Math.PI/2);
                    Tempblock[Currentblock+i][0] = Math.round(temp_x);
                    Tempblock[Currentblock+i][1] = Math.round(temp_y);
                }
            }
        }

        function findValue(Tempblock){
            if(stateCode===1){
                let testValue = 99;
                for(i=0;i<4;i++){   // left
                    if(testValue>Tempblock[Currentblock+i][0]){ testValue = Tempblock[Currentblock+i][0]; }
                }
                return testValue;
            }
            else if(stateCode===3){
                let testValue = -99;
                for(i=0;i<4;i++){   // right
                    if(testValue<Tempblock[Currentblock+i][0]){ testValue = Tempblock[Currentblock+i][0]; }
                }
                return testValue;
            }
            else if(stateCode===2){
                Leftval = 99;
                Rightval = -99;
                for(i=0;i<4;i++){
                    if(Leftval>Tempblock[Currentblock+i][0]){ Leftval = Tempblock[Currentblock+i][0]; }
                    if(Rightval<Tempblock[Currentblock+i][0]){ Rightval = Tempblock[Currentblock+i][0]; }
                }
                return 0;
            }
            else{
                let testValue = -1;
                for(i=0;i<4;i++){   // down
                    if(testValue<Tempblock[Currentblock+i][1]){ testValue = Tempblock[Currentblock+i][1]; }
                }
                return testValue;
            }
        }

        function testBlock(){
            let x = posX;
            let y = posY;
            if(stateCode===2){
                let tb = block.map(v => v.slice());     
                rotate(tb);
                let v = findValue(tb);
                if(Leftval+x<0){ x = x-Leftval; }
                else if(Rightval+x>9){ x = x-Rightval; }
                for(i=0;i<4;i++){
                    let pos_screen = 10*(y+tb[Currentblock+i][1]) + (x+tb[Currentblock+i][0]);
                    if(screen[pos_screen]===1){ return 1; }
                }
                return 0;
            }
            else{
                let v = findValue(block);
                if(stateCode===1){
                    x--;
                    if(v+x<0){ return 1; }
                }
                else if(stateCode===3){
                    x++;
                    if(v+x>9){ return 1; }
                }
                else{ 
                    y++;
                    if(v+y>19){ return 1; }
                }
                for(i=0;i<4;i++){
                    let pos_screen = 10*(y+block[Currentblock+i][1]) + (x+block[Currentblock+i][0]);
                    if(screen[pos_screen]===1){ return 1; }
                }
                return 0;
            }
        }

        function moveBlock(){
            var timecount = requestAnimationFrame(moveBlock);
            context1.clearRect(0,0,300,600);
            printScreen();
            
            if(stateCode===2){
                if(testBlock()===0){
                    rotate(block);
                    if(Leftval+posX<0){ posX = posX-Leftval; }
                    else if(Rightval+posX>9){ posX = posX-Rightval; }
                }
                stateCode = 0;
            }
            else if(stateCode===4){
                if(testBlock()===0){ posY++; }
                else{ fixBlock(); }
                stateCode = 0;
            }
            else{
                if(testBlock()===0){
                    if(stateCode===1){ posX--; }
                    else if(stateCode===3){ posX++; }
                }
                stateCode = 0;
            }

            printBlock();
            deleteLine();

            if(timecount%40===0){
                if(testBlock()===1){ fixBlock();}
                else{ posY++; }
                if(testEnd()===true){
                    cancelAnimationFrame(timecount);
                    setTimeout(function(){
                        alert("Game Over\nScore: " + score);
                        if(confirm("점수를 기록하시겠습니까?")){
                            var name = prompt("점수를 기록할 닉네임을 입력하세요.","");
                            window.location.href = "/saveData_Tetris?name=" + name + "&score=" + score;
                        }
                    },100);
                }
            }
        }

        function fixBlock(){
            for(i=0;i<4;i++){
                let s = 10*(posY+block[Currentblock+i][1]) + (posX+block[Currentblock+i][0]);
                screen[s] = 1;
            }
            init();
        }

        function deleteLine(){
            let q;
            for(j=19;j>0;j--){
                let p = 0;
                while(p<10){
                    let k = 10*j +p;
                    q = 0;
                    if(screen[k]===0){ break; }
                    q = 1;  // 한 줄이 모두 꽉 찼으면 q는 1 아니면 0
                    p++;
                }
                if(q===1){
                    for(i=j;i>0;i--){
                        for(let l=0;l<10;l++){
                            let k = 10*i +l;
                            screen[k] = screen[k-10];
                        }
                    }
                    j += 1;
                    score += 1;
                }
            }        
        }

        function testEnd(){
            for(i=0;i<10;i++){
                if(screen[i]===1){ return true; }
            }
            return false;
        }

        function makeRandcode(){
            var user_code ="";
            var alph = "abcdefghijklmnopqrstuvwxyz";
            for(var i = 0; i < 8; i++){
                user_code += alph.charAt(Math.floor(Math.random() * alph.length));
            }
            return user_code;
        }
    </script>
</html>